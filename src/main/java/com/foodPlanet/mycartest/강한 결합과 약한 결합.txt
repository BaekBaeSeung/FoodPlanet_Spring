이전 예시에서 약한 결합에 대하여 살펴 보았습니다. 
차가 Avante만 있는 것은 아닙니다. 
Sonata, Grandeur 등등 여러 종류의 차가 존재합니다. 
만약 차량을 아반떼가 아닌 다른 차종으로 바뀐다면, 유지 보수 측면에서 이전 소스 역시 비합리적입니다.
아래의 '강한 결합과 약한 결합' 영역을 읽어 주시길 바랍니다.
우선, 차(Car)를 위한 인터페이스 Car, 구현 클래스 Sonata를 생성합니다. 
또한  Avante 클래스는 Car 인터페이스를 상속 받도록 합니다.


강한 결합과 약한 결합
강한 결합(Strong Coupling)과 약한 결합(Loose Coupling)은 객체 지향 프로그래밍에서 중요한 개념 중 하나입니다.
강한 결합은 하나의 클래스가 다른 클래스에 강하게 의존하도록 설계되어 있는 상태를 말합니다. 
즉, 하나의 클래스가 다른 클래스를 생성하거나, 다른 클래스의 메서드를 직접 호출하거나, 다른 클래스의 변수에 직접 접근하는 등의 방식으로 의존성을 갖습니다. 
이러한 경우, 하나의 클래스를 수정하면 그에 의존하는 모든 클래스도 수정되어야 하는 문제가 발생합니다. 
이는 유지보수성이 낮아지고, 코드의 재사용성이 떨어지는 문제를 야기할 수 있습니다.

약한 결합은 클래스 간의 의존성이 낮아지도록 설계되어 있는 상태를 말합니다. 
즉, 클래스 간의 의존성이 줄어들면서 코드의 재사용성과 유지보수성이 높아지는 것입니다. 
이를 위해 인터페이스를 사용하거나, 의존성 주입(Dependency Injection) 등의 방식을 사용하여 클래스 간의 결합도를 낮추는 것이 중요합니다. 
이러한 설계는 코드의 재사용성과 확장성을 높여주며, 유지보수성을 향상시킵니다.